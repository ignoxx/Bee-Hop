<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ide_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Configuration - Edit me

// Screen scale setting for desktop and mobile
if (global.DEVICE_IS_TOUCH) screen_scale_type = SCREEN_FIT; //FIT or FILL (recommended for mobile)
                       else screen_scale_type = SCREEN_FIX;  //FIX or FULL (recommended for desktop)

// On Chrome for Android, the user can only hide the URL bar by scrolling slightly. 
// There needs to be some non-canvas area visible so the user can do this.
leave_room_for_scrolling = NO;
                       
// Allow both orientations
allow_both_orientations = NO;
                       
// Allow desktops to display the rotation message (for testing purposes)
act_like_mobile = NO;
                       
// Keep the window in the center
center_screen = YES;

// Lock the size of the view width and height (but not the port)
view_size_locked = NO;

// Rate that the address bar hides. Do not lower this too much - it isn't user friendly
hide_address_timer = room_speed*3;

// The rate at which to update the screen size (lower value = hungrier processing)
refresh_rate = 5 + (global.DEVICE_IS_TOUCH*5);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify
//(Unless you know what you're doing!)

window_set_size(browser_width,browser_height);
display_set_gui_size(browser_width,browser_height);

if (view_enabled){
    game_width = view_wport[0];    //The desired width of the screen
    game_height = view_hport[0];  //The desired height of the screen
} else {
    game_width = room_width;    //The desired width of the screen
    game_height = room_height;  //The desired height of the screen
}

bw = browser_width;         //The width of the browser
bh = browser_height;        //The height of the browser

vwv = view_wview[0];
vhv = view_hview[0];
vwp = view_wport[0];
vhp = view_hport[0];

// SCREEN ROTATION
desired_rotation = PORTRAIT;   //OR manually choose LANDSCAPE / PORTRAIT constants
actual_rotation = 0;
is_wrong_rotation = NO;  //If the screen is the wrong rotation
turn_angle = 0;          //This is used for the 'please rotate' message
scale = 1;

//The scale of the view
view_scale = view_wview[0]/view_wport[0]; 

x = game_width;
y = game_height;

starting = YES;
alarm[5] = 10;
if !(global.DEVICE_IS_TOUCH)starting = NO;

//Set alarms
alarm[0] = 1;                               //This alarm re-sizes the screen
if (global.DEVICE_IS_TOUCH)alarm[1] = 1;    //This alarm hides the address bar

//Reset screen size on room change
room_change_reset = YES;  

sprite_index = -1;          //Remove my sprite

alarm[4] = 1; //Show the canvas
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify
if (actual_rotation == desired_rotation)
    starting = NO;
else
    alarm[5] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Un-hide the game canvas
jchtml5_show_canvas();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide address bar
alarm[1] = hide_address_timer;
jchtml5_hide_address_bar();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

// Resize the screen

//Reset the alarm
alarm[0] = refresh_rate;

if (is_wrong_rotation){
    window_set_position(0,0);
    alarm[0] = -1;
    exit;
}

var nw,nh;

bw = browser_width;
bh = browser_height;

if (leave_room_for_scrolling &amp;&amp; jc_device_is_touch()){
    bw *= 0.95;
}

if (screen_scale_type == SCREEN_FIT){
    if (actual_rotation == LANDSCAPE){
        nw = bw;nh = (nw/game_width)*game_height;
        if (nh &gt; bh){nh = bh; nw = nh*(game_width/game_height);}
    } else {
        nh = bh;nw = (nh/game_height)*game_width;  
        if (nw &gt; bw){nw = bw; nh = round(nw*(game_height/game_width));}
    }
} else if (screen_scale_type == SCREEN_FILL){  
    nw = bw; nh = (nw/game_width)*game_height;
    if (nh &lt; bh){
        nh = bh; nw = (nh/game_height)*game_width;
    }
} else if (screen_scale_type == SCREEN_FULL){  
    nw = game_width;
    nh = game_height;
} else if (screen_scale_type == SCREEN_FLEX){  
    nw = bw;
    nh = bh;
} else if (screen_scale_type == SCREEN_FIX){  
    if (actual_rotation == LANDSCAPE){
        nw = min(game_width,bw);
        nh = (nw/game_width)*game_height;
        if (nh &gt; bh){nh = bh; nw = nh*(game_width/game_height);}
    } else {
        nh = min(game_height,bh);
        nw = (nh/game_height)*game_width;  
        if (nw &gt; bw){nw = bw; nh = nw*(game_height/game_width);}
    }
}

if (global.DEVICE_IS_TOUCH)
or (act_like_mobile) {
    if (window_get_width() != round(nw)) or (starting){
        nw = round(nw);
        nh = round(nh);
        window_set_size(nw,nh);
        display_set_gui_size(nw,nh);
    }
    
    if (center_screen){
        window_center();
    }
    
} else {            
    x = nw;
    y = nh;
    
    if (jc_device_is_browser()){
        if (center_screen)window_set_position(max(0,(bw*.5)-nw*.5), max(0,(bh*.5)-nh*.5));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

//If the screen size has changed, resize the surface

if (window_get_width() != surface_get_width(application_surface))
or (window_get_height() != surface_get_height(application_surface))
    surface_resize(application_surface, window_get_width(), window_get_height());

//Check if rotation is wrong, set desktop size
if (global.DEVICE_IS_TOUCH)
or (act_like_mobile){
    actual_rotation = browser_width &lt; browser_height;
    
    if (allow_both_orientations)desired_rotation = actual_rotation;
    
    // If the actual rotation is not the desired rotation
    if (actual_rotation != desired_rotation){
            
        if !(is_wrong_rotation){
            is_wrong_rotation = YES;
            
            // While the rotate image is too large for the screen, scale it down
            /*while(sprite_get_width(spr_rotate_text)*scale &gt; browser_width*.85){
                scale *= 0.5;
            }*/
            
            instance_deactivate_all(true);
            //instance_activate_object(shared_Tweener);
            
            alarm[1] = 5;
        }  
    } else {
        if (is_wrong_rotation){
            is_wrong_rotation = NO;
            alarm[1] = 5;
            alarm[0] = 1;
            instance_activate_all();
        }
    }
} else {
    actual_rotation = browser_width &lt; browser_height+320;
    window_set_size(x,y);
    display_set_gui_size(x,y);
    if (center_screen)window_center();
}

//--------------------------------------------------------

///Views
if (view_enabled){
    view_wport[0] = window_get_width();
    view_hport[0] = window_get_height(); 
    
    if (view_size_locked = OFF){ 
        view_wview[0] = window_get_width()*view_scale;
        view_hview[0] = window_get_height()*view_scale;
    } else {
        view_wview[0] = vwv;
        view_hview[0] = vhv;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

if !(room_change_reset)exit;

if (view_enabled){
    game_width = view_wport[0];    //The desired width of the screen
    game_height = view_hport[0];  //The desired height of the screen
} else {
    game_width = room_width;    //The desired width of the screen
    game_height = room_height;  //The desired height of the screen
}

vwv = view_wview[0];
vhv = view_hview[0];
vwp = view_wport[0];
vhp = view_hport[0];

// SCREEN ROTATION
desired_rotation = PORTRAIT;   //OR manually choose LANDSCAPE / PORTRAIT constants

//The scale of the view
view_scale = view_wview[0]/view_wport[0]; 

//Perform the alarm 0 event
event_perform(ev_alarm,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ask user to rotate screen 

//Only edit this if you are unhappy with the default rotate message
draw_set_alpha(1);
if (is_wrong_rotation) {
    var bw = browser_width;
    var bh = browser_height+1;
    window_set_size(bw,bh);
    display_set_gui_size(bw,bh);
    
    /*Draw the background. To change the background color, edit bg_rotate_background. 
    Drawing a stretched background is a workaround for a bug in some browsers*/
    draw_background_stretched(bg_rotate_background,0,0,display_get_gui_width(),display_get_gui_height());
    
    draw_sprite_ext(spr_rotate_mobile,0,display_get_gui_width()*.5,display_get_gui_height()*.5,scale,scale,0,c_white,1);
}
else
if (global.MESSAGE_INVALID != "") {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_jchtml5);
    draw_set_color(c_white);
    jc_draw_text(display_get_gui_width()*.5,display_get_gui_height()*.5,global.MESSAGE_INVALID,scale,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
